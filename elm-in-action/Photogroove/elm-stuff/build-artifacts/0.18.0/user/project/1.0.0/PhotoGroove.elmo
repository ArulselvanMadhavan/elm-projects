var _user$project$PhotoGroove$paperSlider = _elm_lang$html$Html$node('paper-slider');
var _user$project$PhotoGroove$onImmeditateValuChange = function (toMsg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'immediate-value-changed',
		A2(
			_elm_lang$core$Json_Decode$map,
			toMsg,
			A2(
				_elm_lang$core$Json_Decode$at,
				{
					ctor: '::',
					_0: 'target',
					_1: {
						ctor: '::',
						_0: 'immediateValue',
						_1: {ctor: '[]'}
					}
				},
				_elm_lang$core$Json_Decode$int)));
};
var _user$project$PhotoGroove$viewFilter = F3(
	function (name, toMsg, magnitude) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('filter-slider'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(name),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$PhotoGroove$paperSlider,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$max('11'),
							_1: {
								ctor: '::',
								_0: _user$project$PhotoGroove$onImmeditateValuChange(toMsg),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$label,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(magnitude)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$PhotoGroove$sizeToString = function (size) {
	var _p0 = size;
	switch (_p0.ctor) {
		case 'Small':
			return 'small';
		case 'Medium':
			return 'medium';
		default:
			return 'large';
	}
};
var _user$project$PhotoGroove$viewLarge = function (url) {
	var _p1 = url;
	if (_p1.ctor === 'Nothing') {
		return _elm_lang$html$Html$text('');
	} else {
		return A2(
			_elm_lang$html$Html$canvas,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('main-canvas'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('large'),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '[]'});
	}
};
var _user$project$PhotoGroove$urlPrefix = 'http://elm-in-action.com/';
var _user$project$PhotoGroove$setFilters = _elm_lang$core$Native_Platform.outgoingPort(
	'setFilters',
	function (v) {
		return {
			url: v.url,
			filters: _elm_lang$core$Native_List.toArray(v.filters).map(
				function (v) {
					return {name: v.name, amount: v.amount};
				})
		};
	});
var _user$project$PhotoGroove$applyFilters = function (model) {
	var _p2 = model.selectedUrl;
	if (_p2.ctor === 'Just') {
		var url = A2(
			_elm_lang$core$Basics_ops['++'],
			_user$project$PhotoGroove$urlPrefix,
			A2(_elm_lang$core$Basics_ops['++'], 'large/', _p2._0));
		var filters = {
			ctor: '::',
			_0: {
				name: 'Hue',
				amount: _elm_lang$core$Basics$toFloat(model.hue) / 11
			},
			_1: {
				ctor: '::',
				_0: {
					name: 'Ripple',
					amount: _elm_lang$core$Basics$toFloat(model.ripple) / 11
				},
				_1: {
					ctor: '::',
					_0: {
						name: 'Noise',
						amount: _elm_lang$core$Basics$toFloat(model.noise) / 11
					},
					_1: {ctor: '[]'}
				}
			}
		};
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _user$project$PhotoGroove$setFilters(
				{url: url, filters: filters})
		};
	} else {
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _user$project$PhotoGroove$handleSelectByIndex = F2(
	function (index, model) {
		var newSelectedUrl = A2(
			_elm_lang$core$Maybe$map,
			function (_) {
				return _.url;
			},
			A2(
				_elm_lang$core$Array$get,
				index,
				_elm_lang$core$Array$fromList(model.photos)));
		return _user$project$PhotoGroove$applyFilters(
			_elm_lang$core$Native_Utils.update(
				model,
				{selectedUrl: newSelectedUrl}));
	});
var _user$project$PhotoGroove$handleLoadPhotos = F2(
	function (result, model) {
		var _p3 = result;
		if (_p3.ctor === 'Ok') {
			var _p4 = _p3._0;
			return _user$project$PhotoGroove$applyFilters(
				_elm_lang$core$Native_Utils.update(
					model,
					{
						photos: _p4,
						selectedUrl: A2(
							_elm_lang$core$Maybe$map,
							function (_) {
								return _.url;
							},
							_elm_lang$core$List$head(_p4))
					}));
		} else {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{
						loadingError: _elm_lang$core$Maybe$Just('Try restarting the server')
					}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$PhotoGroove$statusChanges = _elm_lang$core$Native_Platform.incomingPort('statusChanges', _elm_lang$core$Json_Decode$string);
var _user$project$PhotoGroove$FilterOptions = F2(
	function (a, b) {
		return {url: a, filters: b};
	});
var _user$project$PhotoGroove$Photo = F3(
	function (a, b, c) {
		return {url: a, size: b, title: c};
	});
var _user$project$PhotoGroove$photoDecoder = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'title',
	_elm_lang$core$Json_Decode$string,
	'(untitled)',
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'size',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'url',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$PhotoGroove$Photo))));
var _user$project$PhotoGroove$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {photos: a, selectedUrl: b, loadingError: c, chosenSize: d, hue: e, ripple: f, noise: g, status: h};
	});
var _user$project$PhotoGroove$SetStatus = function (a) {
	return {ctor: 'SetStatus', _0: a};
};
var _user$project$PhotoGroove$SetNoise = function (a) {
	return {ctor: 'SetNoise', _0: a};
};
var _user$project$PhotoGroove$SetRipple = function (a) {
	return {ctor: 'SetRipple', _0: a};
};
var _user$project$PhotoGroove$SetHue = function (a) {
	return {ctor: 'SetHue', _0: a};
};
var _user$project$PhotoGroove$LoadPhotos = function (a) {
	return {ctor: 'LoadPhotos', _0: a};
};
var _user$project$PhotoGroove$initialCmd = A2(
	_elm_lang$http$Http$send,
	_user$project$PhotoGroove$LoadPhotos,
	A2(
		_elm_lang$http$Http$get,
		'http://elm-in-action.com/photos/list.json',
		_elm_lang$core$Json_Decode$list(_user$project$PhotoGroove$photoDecoder)));
var _user$project$PhotoGroove$SetSize = function (a) {
	return {ctor: 'SetSize', _0: a};
};
var _user$project$PhotoGroove$viewSizeChooser = function (size) {
	return A2(
		_elm_lang$html$Html$label,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('radio'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$name('size'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$PhotoGroove$SetSize(size)),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					_user$project$PhotoGroove$sizeToString(size)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$PhotoGroove$SurpriseMe = {ctor: 'SurpriseMe'};
var _user$project$PhotoGroove$SelectByIndex = function (a) {
	return {ctor: 'SelectByIndex', _0: a};
};
var _user$project$PhotoGroove$handleSurpriseMe = function (model) {
	var randomPhotos = A2(
		_elm_lang$core$Random$int,
		0,
		_elm_lang$core$List$length(model.photos) - 1);
	return {
		ctor: '_Tuple2',
		_0: model,
		_1: A2(_elm_lang$core$Random$generate, _user$project$PhotoGroove$SelectByIndex, randomPhotos)
	};
};
var _user$project$PhotoGroove$update = F2(
	function (msg, model) {
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'SelectByIndex':
				return A2(_user$project$PhotoGroove$handleSelectByIndex, _p5._0, model);
			case 'SelectByUrl':
				return _user$project$PhotoGroove$applyFilters(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							selectedUrl: _elm_lang$core$Maybe$Just(_p5._0)
						}));
			case 'SurpriseMe':
				return _user$project$PhotoGroove$handleSurpriseMe(model);
			case 'SetSize':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{chosenSize: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'LoadPhotos':
				return A2(_user$project$PhotoGroove$handleLoadPhotos, _p5._0, model);
			case 'SetHue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{hue: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetRipple':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{ripple: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetNoise':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{noise: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: _p5._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$PhotoGroove$SelectByUrl = function (a) {
	return {ctor: 'SelectByUrl', _0: a};
};
var _user$project$PhotoGroove$viewThumbnail = F2(
	function (selectedUrl, thumbnail) {
		return A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src(
					A2(_elm_lang$core$Basics_ops['++'], _user$project$PhotoGroove$urlPrefix, thumbnail.url)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$title(
						A2(
							_elm_lang$core$Basics_ops['++'],
							thumbnail.title,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'[',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(thumbnail.size),
									']KB')))),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$classList(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'selected',
									_1: _elm_lang$core$Native_Utils.eq(
										selectedUrl,
										_elm_lang$core$Maybe$Just(thumbnail.url))
								},
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$PhotoGroove$SelectByUrl(thumbnail.url)),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$PhotoGroove$Large = {ctor: 'Large'};
var _user$project$PhotoGroove$Medium = {ctor: 'Medium'};
var _user$project$PhotoGroove$Small = {ctor: 'Small'};
var _user$project$PhotoGroove$initialModel = {
	photos: {ctor: '[]'},
	selectedUrl: _elm_lang$core$Maybe$Nothing,
	loadingError: _elm_lang$core$Maybe$Nothing,
	chosenSize: _user$project$PhotoGroove$Small,
	hue: 0,
	ripple: 0,
	noise: 0,
	status: ''
};
var _user$project$PhotoGroove$init = function (flags) {
	var status = A2(
		_elm_lang$core$Basics_ops['++'],
		'Initializing Pasta v',
		_elm_lang$core$Basics$toString(flags));
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			_user$project$PhotoGroove$initialModel,
			{status: status}),
		_1: _user$project$PhotoGroove$initialCmd
	};
};
var _user$project$PhotoGroove$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('content'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Photo Groove'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$PhotoGroove$SurpriseMe),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Surprise Me'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('status'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(model.status),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('filters'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A3(_user$project$PhotoGroove$viewFilter, 'Hue', _user$project$PhotoGroove$SetHue, model.hue),
								_1: {
									ctor: '::',
									_0: A3(_user$project$PhotoGroove$viewFilter, 'Ripple', _user$project$PhotoGroove$SetRipple, model.ripple),
									_1: {
										ctor: '::',
										_0: A3(_user$project$PhotoGroove$viewFilter, 'Noise', _user$project$PhotoGroove$SetNoise, model.noise),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h3,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Thumnail Size:'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$id('choose-size'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										_user$project$PhotoGroove$viewSizeChooser,
										{
											ctor: '::',
											_0: _user$project$PhotoGroove$Small,
											_1: {
												ctor: '::',
												_0: _user$project$PhotoGroove$Medium,
												_1: {
													ctor: '::',
													_0: _user$project$PhotoGroove$Large,
													_1: {ctor: '[]'}
												}
											}
										})),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$id('thumbnails'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class(
													_user$project$PhotoGroove$sizeToString(model.chosenSize)),
												_1: {ctor: '[]'}
											}
										},
										A2(
											_elm_lang$core$List$map,
											_user$project$PhotoGroove$viewThumbnail(model.selectedUrl),
											model.photos)),
									_1: {
										ctor: '::',
										_0: _user$project$PhotoGroove$viewLarge(model.selectedUrl),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$PhotoGroove$viewOrError = function (model) {
	var _p6 = model.loadingError;
	if (_p6.ctor === 'Nothing') {
		return _user$project$PhotoGroove$view(model);
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('error-message'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Photo Groove'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(_p6._0),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	}
};
var _user$project$PhotoGroove$main = _elm_lang$html$Html$programWithFlags(
	{
		init: _user$project$PhotoGroove$init,
		view: _user$project$PhotoGroove$viewOrError,
		update: _user$project$PhotoGroove$update,
		subscriptions: function (_p7) {
			return _user$project$PhotoGroove$statusChanges(_user$project$PhotoGroove$SetStatus);
		}
	})(_elm_lang$core$Json_Decode$float);
